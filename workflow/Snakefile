import glob
import os
configfile: "config/config.yaml"

include: "rules/common.smk"
include: "rules/load_db.smk"

samples = [os.path.basename(f).replace(".fastq.gz", "") for f in glob.glob(os.path.join(config["base_dir"], "data", "fastq", "*.fastq.gz"))]

print(f"Detected samples: {samples}")

rule all:
    input:
        "results/report.zip"

rule decompress_fastq:
    input:
        "{base_dir}/data/fastq/{sample}.fastq.gz"
    log:
        "{base_dir}/logs/decompress_fastq/{sample}.log"    
    output:
        temp("{base_dir}/data/fastq/{sample}.fastq")
    shell:
        "gzip -dk {input} 2> {log}"

rule convert_fastq_to_fasta:
    input:
        "{base_dir}/data/fastq/{sample}.fastq"
    output:
        temp("{base_dir}/data/fastq/{sample}.fasta")
    log:
        "{base_dir}/logs/convert_fastq_to_fasta/{sample}.log"    
    conda:
        "envs/python.yaml"        
    shell:
        "seqtk seq -a {input} > {output} 2> {log}"

rule blast_card:
    input:
        fasta = "{base_dir}/data/fastq/{sample}.fasta",
        card = "{base_dir}/data/blast_db/card_db.pdb"
    output:
        card_results = temp("{base_dir}/results/{sample}/card_results.txt")
    params:
        db = "{base_dir}/data/blast_db"
    log:
        "{base_dir}/logs/blast_card/{sample}.log"    
    conda:
        "envs/blast.yaml"        
    shell:
        """
        blastx -query {input.fasta} -db {params.db}/card_db -out {output.card_results} -outfmt 6 -evalue 1e-5 -num_threads 64 2> {log}
        """

rule blast_silva:
    input:
        fasta = "{base_dir}/data/fastq/{sample}.fasta",
        silva = "{base_dir}/data/blast_db/silva_db.ndb"
    output:
        silva_results = temp("{base_dir}/results/{sample}/SILVA_results.txt")
    params:
        db = "{base_dir}/data/blast_db"
    log:
        "{base_dir}/logs/blast_silva/{sample}.log" 
    conda:
        "envs/blast.yaml"        
    shell:
        """
        blastn -query {input.fasta} -db {params.db}/silva_db -out {output.silva_results} -outfmt 6 -evalue 1e-5 -num_threads 64 2> {log}
        """

rule gzip_blast_results:
    input:
        silva_results = "{base_dir}/results/{sample}/SILVA_results.txt",
        card_results = "{base_dir}/results/{sample}/card_results.txt"
    output:
        silva_zip = "{base_dir}/results/{sample}/SILVA_results.txt.gz",
        card_zip = "{base_dir}/results/{sample}/card_results.txt.gz"
    log:
        "{base_dir}/logs/gzip_blast_results/{sample}.log"        
    shell:
        """
        gzip {input.silva_results} 2> {log}
        gzip {input.card_results} 2>> {log}
        """

rule integrate_blast_data:
    input:
        card_results = "{base_dir}/results/{sample}/card_results.txt.gz",
        silva_results = "{base_dir}/results/{sample}/SILVA_results.txt.gz",
        aro_mapping = "{base_dir}/data/card_db/aro_index.tsv",
        taxa_mapping = "{base_dir}/data/silva_db/silva_tax.txt"        
    output:
        intermed_card_results = temp("{base_dir}/results/{sample}/intermed_card_results.csv"),
        intermed_silva_results = temp("{base_dir}/results/{sample}/intermed_silva_results.csv"),
        integrated_data = "{base_dir}/results/{sample}/integrated_filtered_results.csv"
    params:
        chunksize = config["chunksize"]
    log:
        "{base_dir}/logs/integrate_blast_data/{sample}.log"    
    conda:            
        "envs/python.yaml"
    script:
        "scripts/integrate_blast_data.py"

rule gzip_integrated_blast_data:
    input:
        int_data = "{base_dir}/results/{sample}/integrated_filtered_results.csv"
    log:
        "{base_dir}/logs/gzip_integrated_blast_data/{sample}.log"    
    output:
        int_data_zip = "{base_dir}/results/{sample}/integrated_filtered_results.csv.gz"
    shell:
        "gzip -9 {input.int_data} 2> {log}"

rule filter_blast_results:
    input:
        integrated_data = "{base_dir}/results/{sample}/integrated_filtered_results.csv.gz"
    output:
        filtered_data = "{base_dir}/results/{sample}/filtered_results.csv"
    params:
        min_similarity = config["min_similarity"]
    log:
        "{base_dir}/logs/filter_blast_results/{sample}.log"         
    conda:
        "envs/python.yaml"   
    script:
        "scripts/filter_blast_results.py"

rule generate_genus_distribution_plot:
    input:
        filtered_data = "{base_dir}/results/{sample}/filtered_results.csv"
    output:
        report(
            "{base_dir}/results/{sample}/genus_distribution_plot.html",
            caption = "../report/genus_top_hits.rst",
            htmlindex="genus_distribution_plot.html",
            category="1. Genus distribution/{sample}"
        )
    params:
        sample_name = "{sample}"
    log:
        "{base_dir}/logs/generate_genus_distribution_plot/{sample}.log"         
    conda:
        "envs/python.yaml"          
    script:
        "scripts/generate_genus_distribution_plot.py"

rule generate_genus_top_hits:
    input:
        filtered_data = "{base_dir}/results/{sample}/filtered_results.csv"
    output:
        report(
            "{base_dir}/results/{sample}/genus_top_hits.html",
            caption = "../report/genus_top_hits.rst",
            htmlindex="genus_top_hits.html",
            category="1. Genus distribution/{sample}"
        )
    params:
        sample_name = "{sample}",
        chunksize = config["chunksize"]    
    log:
        "{base_dir}/logs/generate_genus_top_hits/{sample}.log"                  
    conda:
        "envs/python.yaml"
    script:
        "scripts/genus_top_hits.py"

rule plot_evalue_boxplot:
    input:
        csv_files = expand("{base_dir}/results/{sample}/filtered_results.csv", sample=samples,base_dir=config["base_dir"])
    output:
        report(
            "{base_dir}/results/boxplots/combined_evalue_boxplot.png",
            caption = "../report/genus_top_hits.rst",
            category="3. General data"
        )
    params:
        min_similarity = config["min_similarity"]
    log:
        "{base_dir}/logs/plot_evalue_boxplot/combined.log"               
    conda:
        "envs/python.yaml"     
    script:
        "scripts/evalue_boxplots.py"

rule plot_percentage_identity_boxplot:
    input:
        csv_files = expand("{base_dir}/results/{sample}/filtered_results.csv", sample=samples,base_dir=config["base_dir"])
    output:
        report(
            "{base_dir}/results/boxplots/combined_percidt_boxplot.png",
            caption = "../report/genus_top_hits.rst",
            category="3. General data",        
        )
    params:
        min_similarity = config["min_similarity"]
    log:
        "{base_dir}/logs/plot_percentage_identity_boxplot/combined.log"    
    conda:
        "envs/python.yaml"     
    script:
        "scripts/percidt_boxplots.py"

rule plot_alignment_length_boxplot:
    input:
        csv_files = expand("{base_dir}/results/{sample}/filtered_results.csv", sample=samples,base_dir=config["base_dir"])
    output:
        report(
            "{base_dir}/results/boxplots/combined_allength_boxplot.png",
            caption = "../report/genus_top_hits.rst",
            category="3. General data",        
        )        
    params:
        min_similarity = config["min_similarity"]
    log:
        "{base_dir}/logs/plot_alignment_length_boxplot/combined.log"               
    conda:
        "envs/python.yaml"     
    script:
        "scripts/align_lengths_boxplots.py"

rule plot_read_positions:
    input:
        filtered_data = "{base_dir}/results/{sample}/filtered_results.csv"
    output:
        report(
            "{base_dir}/results/{sample}/read_positions.png",
            caption = "../report/genus_top_hits.rst",
            category="3. General data",        
        )  
    params:
        sample_name = "{sample}",
        chunksize = config["chunksize"]
    log:
        "{base_dir}/logs/plot_read_positions/{sample}.log"            
    conda:
        "envs/python.yaml"
    script:
        "scripts/read_position.py"

rule generate_percidt_genus:
    input:
        filtered_data = "{base_dir}/results/{sample}/filtered_results.csv"
    output:
        report(
            "{base_dir}/results/{sample}/genus_idt_per_genus_plot.png",
            caption = "../report/genus_top_hits.rst",
            category="2. Genus percentage Identity",
        )
    log:
        "{base_dir}/logs/generate_percidt_genus/{sample}.log"            
    conda:
        "envs/python.yaml"
    script:
        "scripts/percidt_per_genus.py"

rule snakemake_report:
    input:
        expand("{base_dir}/results/{sample}/genus_top_hits.html", sample=samples,base_dir=config["base_dir"]),
        expand("{base_dir}/results/{sample}/genus_distribution_plot.html", sample=samples,base_dir=config["base_dir"]),
        expand("{base_dir}/results/{sample}/genus_idt_per_genus_plot.png", sample=samples,base_dir=config["base_dir"]),
        expand("{base_dir}/results/{sample}/read_positions.png", sample=samples,base_dir=config["base_dir"]),
        expand("{base_dir}/results/boxplots/combined_evalue_boxplot.png",base_dir=config["base_dir"]),
        expand("{base_dir}/results/boxplots/combined_allength_boxplot.png",base_dir=config["base_dir"]),
        expand("{base_dir}/results/boxplots/combined_percidt_boxplot.png",base_dir=config["base_dir"])
    output:
        "results/report.zip"     
    shell:
        "snakemake --nolock --report {output} --report-stylesheet config/custom-stylesheet.css"
