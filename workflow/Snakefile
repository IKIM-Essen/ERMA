import glob
import os
configfile: "config/config.yaml"

fastq_dir = config['paths']['fastq_dir']

# Process all samples that end with .fastq.gz and are stored in fastq_dir
samples = [os.path.basename(f).replace(".fastq.gz", "") for f in glob.glob(os.path.join(fastq_dir, "*.fastq.gz"))]

print(f"Detected samples: {samples}")

include: "rules/load_db.smk"

rule all:
    input:
        "results/report.zip"

rule decompress_fastq:
    input:
        "{fastq_dir}/{sample}.fastq.gz"
    output:
        temp("{fastq_dir}/{sample}.fastq")
    shell:
        "gunzip -c {input} > {output}"

rule convert_fastq_to_fasta:
    input:
        "{fastq_dir}/{sample}.fastq"
    output:
        temp("{fastq_dir}/{sample}.fasta")
    shell:
        "seqtk seq -a {input} > {output}"

rule blast_card:
    input:
        fasta = config["paths"]["fastq_dir"] +"/{sample}.fasta",
        db = config["blast_db"]["blast"]
    output:
        card_results = temp("{outdir}/{sample}/card_results.txt")
    shell:
        """
        blastx -query {input.fasta} -db {input.db}/card_db -out {output.card_results} -outfmt 6 -evalue 1e-5 -num_threads 64
        """

rule blast_silva:
    input:
        fasta = config["paths"]["fastq_dir"] +"/{sample}.fasta",
        db = config["blast_db"]["blast"],
    output:
        silva_results = temp("{outdir}/{sample}/SILVA_results.txt")
    shell:
        """
        blastn -query {input.fasta} -db {input.db}/silva_db -out {output.silva_results} -outfmt 6 -evalue 1e-5 -num_threads 64
        """

rule gzip_blast_results:
    input:
        silva_results = "{outdir}/{sample}/SILVA_results.txt",
        card_results = "{outdir}/{sample}/card_results.txt",
    output:
        silva_zip = "{outdir}/{sample}/SILVA_results.txt.gz",
        card_zip = "{outdir}/{sample}/card_results.txt.gz",
    shell:
        """
        gzip {input.silva_results}
        gzip {input.card_results}
        """     

rule integrate_blast_data:
    input:
        card_results = "{outdir}/{sample}/card_results.txt.gz",
        silva_results = "{outdir}/{sample}/SILVA_results.txt.gz"
    output:
        intermed_card_results = temp("{outdir}/{sample}/intermed_card_results.csv"),
        intermed_silva_results = temp("{outdir}/{sample}/intermed_silva_results.csv"),
        integrated_data = "{outdir}/{sample}/integrated_filtered_results.csv"    
    params:
        aro_mapping = config["aro_mapping_path"],
        taxa_mapping = config["taxa_mapping_path"],       
    conda:
        "envs/python.yaml"    
    threads: 60
    script:
        "scripts/integrate_blast_data.py"

rule gzip_integrated_blast_data:
    input:
        int_data = "{outdir}/{sample}/integrated_filtered_results.csv"
    output:
        int_data_zp = "{outdir}/{sample}/integrated_filtered_results.csv.gz"
    shell:
        "gzip {input.int_data}"

rule filter_blast_results:
    input:
        integrated_data = "{outdir}/{sample}/integrated_filtered_results.csv.gz"
    output:
        filtered_data = "{outdir}/{sample}/filtered_results.csv"
    params:
        min_similarity = config["min_similarity"]
    script:
        "scripts/filter_blast_results.py"

rule generate_genus_distribution_plot:
    input:
        filtered_data = "{outdir}/{sample}/filtered_results.csv"
    output:
        report(
            "{outdir}/{sample}/genus_distribution_plot.html",
            caption = "../report/genus_top_hits.rst",
            htmlindex="genus_distribution_plot.html",
            category="1. Genus distribution/{sample}",            
        )
    params:
        sample_name = "{sample}"    
    script:
        "scripts/generate_genus_distribution_plot.py"

rule generate_genus_top_hits:
    input:
        filtered_data = "{outdir}/{sample}/filtered_results.csv"
    output:
        report(
            "{outdir}/{sample}/genus_top_hits.html",
            caption = "../report/genus_top_hits.rst",
            htmlindex="genus_top_hits.html",
            category="1. Genus distribution/{sample}",
        )
    params:
        sample_name = "{sample}"        
    script:
        "scripts/genus_top_hits.py"

rule generate_percidt_genus:
    input:
        filtered_data = "{outdir}/{sample}/filtered_results.csv"
    output:
        report(
            "{outdir}/{sample}/genus_idt_per_genus_plot.png",
            caption = "../report/genus_top_hits.rst",
            category="2. Genus percentage Identity",
        )
    script:
        "scripts/percidt_per_genus.py"

rule plot_evalue_boxplot:
    input:
        csv_files = expand("{outdir}/{sample}/filtered_results.csv", 
                            sample=samples, outdir=config["paths"]["output_dir"]),
    output:
        report(
            config["paths"]["output_dir"] +"/boxplots/combined_evalue_boxplot.png",
            caption = "../report/genus_top_hits.rst",
            category="3. General data",
        )            
    params:
        min_similarity = config["min_similarity"]
    script:
        "scripts/evalue_boxplots.py"


rule plot_percentage_identity_boxplot:
    input:
        csv_files = expand("{outdir}/{sample}/filtered_results.csv", sample=samples, outdir=config["paths"]["output_dir"]),
    output:
        report(
            config["paths"]["output_dir"] +"/boxplots/combined_percidt_boxplot.png",
            caption = "../report/genus_top_hits.rst",
            category="3. General data",        
        )
    params:
        min_similarity = config["min_similarity"]
    script:
        "scripts/percidt_boxplots.py"

rule plot_alignment_length_boxplot:
    input:
        csv_files = expand("{outdir}/{sample}/filtered_results.csv", sample=samples, outdir=config["paths"]["output_dir"]),
    output:
        report(
            config["paths"]["output_dir"] +"/boxplots/combined_allength_boxplot.png",
            caption = "../report/genus_top_hits.rst",
            category="3. General data",        
        )        
    params:
        min_similarity = config["min_similarity"]
    script:
        "scripts/align_lengths_boxplots.py"

rule plot_read_positions:
    input:
        filtered_data = "{outdir}/{sample}/filtered_results.csv"
    output:
        report(
            "{outdir}/{sample}/read_positions.png",
            caption = "../report/genus_top_hits.rst",
            category="3. General data",        
        )                
    params:
        sample_name = "{sample}"        
    script:
        "scripts/read_position.py"

rule snakemake_report:
    input:
        expand("{outdir}/{sample}/genus_top_hits.html", sample=samples, outdir=config["paths"]["output_dir"]),
        expand("{outdir}/{sample}/genus_distribution_plot.html", sample=samples, outdir=config["paths"]["output_dir"]),
        expand("{outdir}/{sample}/genus_idt_per_genus_plot.png", sample=samples, outdir=config["paths"]["output_dir"]),
        expand("{outdir}/{sample}/read_positions.png", sample=samples, outdir=config["paths"]["output_dir"]),
        config["paths"]["output_dir"] +"/boxplots/combined_evalue_boxplot.png",
        config["paths"]["output_dir"] +"/boxplots/combined_percidt_boxplot.png",
        config["paths"]["output_dir"] +"/boxplots/combined_allength_boxplot.png",
    output:
        "results/report.zip",
    shell:
        "snakemake --nolock --report {output} --report-stylesheet config/custom-stylesheet.css"